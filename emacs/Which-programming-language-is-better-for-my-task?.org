I decide to use programming language that it depends on application domain:
- MCU base: C language
- Embedded base: C/C++/Python language
- PC/Server base: C/C++/Python language
- Web base: Python+JavaScript language

To know the history of programming language will help you to choose a suitable programming language for your work.

#+BEGIN_SRC dot :file ./images/TimelineOfProgrammingLanguage.svg :cmdline -Kdot -Tsvg
digraph historyProgrammingLanguage {
  size="10,10";
  graph [rankdir=TB, sep="+5,0"];
  node [style=filled, color=white, fontname="Lucida Sans"];
  {
    node [shape=none, color=white, fillcolor=white, fontsize=20, height=.5];
    1951 -> 1952 [style=invis];
    1952 -> 1954 [style=invis];
    1954 -> 1955 [style=invis];
    1955 -> 1957 [style=invis];
    1957 -> 1958 [style=invis];
    1958 -> 1959 [style=invis];
    1959 -> 1962 [style=invis];
    1962 -> 1963 [style=invis];
    1963 -> 1964 [style=invis];
    1964 -> 1966 [style=invis];
    1966 -> 1967 [style=invis];
    1967 -> 1968 [style=invis];
    1968 -> 1969 [style=invis];
    1969 -> 1970 [style=invis];
    1970 -> 1972 [style=invis];
    1972 -> 1973 [style=invis];
    1973 -> 1975 [style=invis];
    1975 -> 1978 [style=invis];
    1978 -> 1980 [style=invis];
    1980 -> 1983 [style=invis];
    1983 -> 1984 [style=invis];
    1984 -> 1985 [style=invis];
    1985 -> 1986 [style=invis];
    1986 -> 1987 [style=invis];
    1987 -> 1988 [style=invis];
    1988 -> 1989 [style=invis];
    1989 -> 1990 [style=invis];
    1990 -> 1991 [style=invis];
    1991 -> 1993 [style=invis];
    1993 -> 1994 [style=invis];
    1994 -> 1995 [style=invis];
    1995 -> 1997 [style=invis];
    1997 -> 2000 [style=invis];
    2000 -> 2001 [style=invis];
    2001 -> 2002 [style=invis];
    2002 -> 2003 [style=invis];
    2003 -> 2005 [style=invis];
    2005 -> 2006 [style=invis];
    2006 -> 2007 [style=invis];
    2007 -> 2009 [style=invis];
    2009 -> 2010 [style=invis];
    2010 -> 2011 [style=invis];
    2011 -> 2012 [style=invis];
    2012 -> 2014 [style=invis];
    2014 -> 2016 [style=invis];
  }
  {
    node [shape=box, fillcolor=cornsilk3];
    { rank=same; 1951; JACQUARD_LOOM [label="Regional Assembly Language", fillcolor=white];}
    { rank=same; 1952; AUTOCODE [label="Autocode", fillcolor=white];}
    { rank=same; 1954; IPL [label="IPL", fillcolor=white];}
    { rank=same; 1955; FLOW_MATIC [label="FLOW-MATIC", fillcolor=white];}
    { rank=same; 1957; FORTRAN [label="FORTRAN\n(First compiler)", fillcolor=white];}
    { rank=same; 1957; COMTRAN [label="COMTRAN", fillcolor=white];}
    { rank=same; 1958; LISP [label="LISP", fillcolor=white];}
    { rank=same; 1958; ALGOL58 [label="ALGOL 58", fillcolor=white];}
    { rank=same; 1959; FACT [label="FACT", fillcolor=white];}
    { rank=same; 1959; COBOL [label="COBOL", fillcolor=white];}
    { rank=same; 1959; RPG [label="RPG", fillcolor=white];}
    { rank=same; 1962; APL [label="APL", fillcolor=white];}
    { rank=same; 1962; SIMULA [label="Simula", fillcolor=white];}
    { rank=same; 1962; SNOBOL [label="SNOBOL", fillcolor=white];}
    { rank=same; 1963; CPL [label="CPL", fillcolor=white];}
    { rank=same; 1964; SPEAKEASY [label="Speakeasy", fillcolor=white];}
    { rank=same; 1964; BASIC [label="BASIC", fillcolor=white];}
    { rank=same; 1964; PL_I [label="PL/I", fillcolor=white];}
    { rank=same; 1966; JOSS [label="JOSS", fillcolor=white];}
    { rank=same; 1967; BCPL [label="BCPL", fillcolor=white];}

    IPL -> LISP [style=solid, arrowhead=normal]
    FLOW_MATIC -> COBOL [style=solid, arrowhead=normal]
    COMTRAN -> COBOL [style=solid, arrowhead=normal]
    FACT -> COBOL [style=solid, arrowhead=normal]
  }
  {
    node [shape=box, fillcolor=cornsilk3];
    { rank=same; 1968; LOGO [label="Logo", fillcolor=white];}
    { rank=same; 1969; B [label="B", fillcolor=white];}
    { rank=same; 1970; PASCAL [label="Pascal", fillcolor=white];}
    { rank=same; 1970; FORTH [label="Forth", fillcolor=white];}
    { rank=same; 1972; C [label="C", fillcolor=yellow];}
    { rank=same; 1972; SMALLTALK [label="Smalltalk", fillcolor=white];}
    { rank=same; 1972; PROLOG [label="Prolog", fillcolor=white];}
    { rank=same; 1973; ML [label="ML", fillcolor=white];}
    { rank=same; 1975; SCHEME [label="Scheme", fillcolor=white];}
    { rank=same; 1978; SQL [label="SQL", fillcolor=white];}

    CPL -> C [style=solid, arrowhead=normal]
    BCPL -> C [style=solid, arrowhead=normal]
    B -> C [style=solid, arrowhead=normal]
  }
  {
    node [shape=box, fillcolor=cornsilk3];
    { rank=same; 1980; CPP [label="C++", fillcolor=yellow];}
    { rank=same; 1983; ADA [label="Ada", fillcolor=white];}
    { rank=same; 1984; COMMON_LISP [label="Common Lisp", fillcolor=white];}
    { rank=same; 1984; MATLAB [label="MATLAB", fillcolor=white];}
    { rank=same; 1984; DBASE_III [label="dBase III, dBase III Plus", fillcolor=white];}
    { rank=same; 1985; EIFFEL [label="Eiffel", fillcolor=white];}
    { rank=same; 1986; OBJECTIVE_C [label="Objective-C", fillcolor=orange];}
    { rank=same; 1986; LABVIEW [label="LabVIEW", fillcolor=white];}
    { rank=same; 1986; ERLANG [label="Erlang", fillcolor=white];}
    { rank=same; 1987; PERL [label="Perl", fillcolor=white];}
    { rank=same; 1988; TCL [label="Tcl", fillcolor=white];}
    { rank=same; 1988; WOLFRAM_LANGUAGE [label="Wolfram Language", fillcolor=white];}
    { rank=same; 1989; FL [label="FL", fillcolor=white];}
  }
  {
    node [shape=box, fillcolor=cornsilk3];
    { rank=same; 1990; HASKELL [label="Haskell", fillcolor=white];}
    { rank=same; 1991; PYTHON [label="Python", fillcolor=green];}
    { rank=same; 1991; VISUAL_BASIC [label="Visual Basic", fillcolor=white];}
    { rank=same; 1993; LUA [label="Lua", fillcolor=white];}
    { rank=same; 1993; R [label="R", fillcolor=white];}
    { rank=same; 1994; CLOS [label="CLOS\n(part of ANSI Common Lisp)", fillcolor=white];}
    { rank=same; 1995; RUBY [label="Ruby", fillcolor=white];}
    { rank=same; 1995; ADA95 [label="Ada 95", fillcolor=white];}
    { rank=same; 1995; JAVA [label="Java", fillcolor=cyan];}
    { rank=same; 1995; DELPHI [label="Delphi\nObject Pascal", fillcolor=white];}
    { rank=same; 1995; JAVA_SCRIPT [label="JavaScript", fillcolor=cyan];}
    { rank=same; 1995; PHP [label="PHP", fillcolor=white];}
    { rank=same; 1997; REBOL [label="Rebol", fillcolor=white];}
  }
  {
    node [shape=box, fillcolor=cornsilk3];
    { rank=same; 2000; ACTION_SCRIPT [label="ActionScript", fillcolor=white];}
    { rank=same; 2001; C_SHARP [label="C#", fillcolor=white];}
    { rank=same; 2001; D [label="D", fillcolor=white];}
    { rank=same; 2002; SCRATCH [label="Scratch", fillcolor=white];}
    { rank=same; 2003; GROOVY [label="Groovy", fillcolor=white];}
    { rank=same; 2003; SCALA [label="Scala", fillcolor=white];}
    { rank=same; 2005; F_SHARP [label="F#", fillcolor=white];}
    { rank=same; 2006; POWER_SHELL [label="PowerShell", fillcolor=white];}
    { rank=same; 2007; CLOJURE [label="Clojure", fillcolor=white];}
    { rank=same; 2009; GO [label="Go", fillcolor=yellow];}
    { rank=same; 2010; RUST [label="Rust", fillcolor=white];}
    { rank=same; 2011; DART [label="Dart", fillcolor=white];}
    { rank=same; 2011; KOTLIN [label="Kotlin", fillcolor=white];}
    { rank=same; 2011; RED [label="Red", fillcolor=white];}
    { rank=same; 2011; ELIXIR [label="Elixir", fillcolor=white];}
    { rank=same; 2012; JULIA [label="Julia", fillcolor=white];}
    { rank=same; 2014; SWIFT [label="Swift", fillcolor=orange];}
    { rank=same; 2016; RING [label="Ring", fillcolor=white];}
  }

  notice [shape=box, label="Project: practice\lSubject: Timeline of programming language\lAuthor: YenHung Chen\lE-mail: yhchen@wizign.com\lRevision:\l========== ==================================\l2018-08-26 Created by YenHung Chen\l"];
}
#+END_SRC
#+CAPTION: Timeline of programming language
#+RESULTS:
[[file:./images/TimelineOfProgrammingLanguage.svg]]

The C language was developed to re-implement the Unix operating system at Bell Labs. It replaced assembly language as the major programming language. Now, the most of the Unix kernel is written in C language. It has following characteristics:
- There is a small and fixed number of keywords.
- There are a large number of arithmetical and logical operators.
- More than one assignment may be performed in a single statement.
- Function return values can be ignored when not needed.
- All data has a type, but implicit conversions may be performed.
- Declaration syntax mimics usage context.
- User-defined and compound types are possible.
- Low-level access to computer memory is possible.
- Procedures (subroutines not returning values) are a special case of function, with an untyped return type void.
- Functions may not be defined within the lexical scope of other functions.
- Function and data pointers permit ad hoc run-time polymorphism.
- A preprocessor performs macro definition, source code file inclusion, and conditional compilation.
- There is a basic form of modularity: files can be compiled separately and linked together, with control over which functions and data objects are visible to other files via static and extern attributes.
- Complex functionality such as I/O, string manipulation, and mathematical functions are consistently delegated to library routines.

*** Reference
- [[https://en.wikipedia.org/wiki/History_of_programming_languages][History of programming languages]]
- [[https://en.wikipedia.org/wiki/C_(programming_language)][C (programming language)]]
